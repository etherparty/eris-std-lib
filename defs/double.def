;Double type Definitions
{
	(include "stdvarspace.def")

	;Double
	;@vari(name): "double"
	
	;+ stdVSsize +1 : value  - Highest bytes first
	;+ stdVSsize +2 : value2

	;INTERNALs
	(def 'IdoubleVS1 (value) (+ value (+ stdVSsize 1)))
	(def 'IdoubleVS2 (value) (+ value (+ stdVSsize 2)))
	(def 'IdoubleValue1 (value) @@(IdoubleVS1 value))
	(def 'IdoubleValue2 (value) @@(IdoubleVS2 value))

	(def 'IdoubleInit (base addperm rmperm modperm value value2)
		{
			[[base]]"double"
			[[(IvapSlot base)]]addperm
			[[(IvrpSlot base)]]rmperm 		
			[[(IvmpSlot base)]]modperm
			[[(IdoubleVS1 base)]]value
			[[(IdoubleVS2 base)]]value2
		}
	)
	(def 'IdoubleLoad (base mem)
		{
			[mem]@@(IdoubleVS1 base)
			[(+ mem 0x20)]@@(IdoubleVS2 base)
		}
	)

	;Double Get should push the both values onto the stack but def does not let you do that

	(def 'IdoubleSet (base value value2)
		{
			[[(IdoubleVS1 base)]]value
			[[(IdoubleVS2 base)]]value2
		}
	)

	(def 'IdoubleStore (base mem boolmem)
		{
			(if boolmem
				(IdoubleSet base @mem @(+ mem 0x20))
				(IdoubleSet base (calldataload mem) (calldataload (+ mem 0x20)))
			)
		}
	)

	(def 'doubleVS1 (name) (IdoubleVS1 (vari name)))
	(def 'doubleVS2 (name) (IdoubleVS2 (vari name)))
	(def 'doubleValue1 (name) @@(IdoubleVS1 (vari name)))
	(def 'doubleValue2 (name) @@(IdoubleVS2 (vari name)))

	(def 'doubleInit (name addperm rmperm modperm value value2) (IdoubleInit (vari name) addperm rmperm modperm value value2))
;	(def 'doubleInit (name addperm rmperm modperm value value2)
;		{
;			[[@@0x0]](vari name)
;			[[(+ @@0x0 1)]]addperm
;			[[(+ @@0x0 2)]]rmperm
;			[[(+ @@0x0 3)]]modperm
;			[[(+ @@0x0 4)]]value
;			[[(+ @@0x0 5)]]value2
;			[[0x0]](+ @@0x0 0x10)
;		}
;	)
	(def 'doubleLoad (name mem) (IdoubleLoad (vari name) mem))
	(def 'doubleSet (name value value2) (IdoubleSet (vari name) value value2))
	(def 'doubleStore (name mem boolmem) (IdoubleStore (vari name) mem boolmem))

}