;Gen DOUG

;Structure
;==========
;Top level slots

;GLOBAL VARIABLES
;@0x7 : offset = 0x10000 - The spacing used to avoid collision of name spaces (contracts, permissions and variables)
;@0x8 : GFzeros = 0x1000000 - Names used buts end in at least 3 empty bytes in order to partition name spaces
;@0x9 : colavd = 0x100 - This is used to partition user address space

;C3D Spec compliance
;@0x10 : BAindicator
;@0x11 : BAdmpointer
;@0x12 : BAUIpointer
;@0x13 : BAblob
;@0x14 : BAparent
;@0x15 : BAowner
;@0x16 : BAcreator
;@0x17 : BAtime
;@0x18 : BAbehaviour

;Contract Names linked list data
;@0x19 : BALLstart (headslot) - most recent addition
;@0x20 : Tailslot - oldest member of linked list
;@0x22 : countslot - How many members are in list

;Permission values
;@0x23 : prowslot - Stores the row the next free permission nibble is located at
;@0x24 : pbitslot - Store the next free permission bit position

;DYNAMIC STRUCTURES
;====================

;DOUG ENTRIES
;------------
;@"name" : 0xAddress  - Contract address associated with "name"
;+1 	 : "Previous" - previous name in linked list (0x30 if start of list excluding the place holder)
;+2 	 : "Next"     - next name in linked list (0 if end of list)

;C3D Compliance
;+3      : Type
;+4      : behaviour
;+5      : data
;+6      : datamodel
;+7      : UI
;+8      : time



;PERMISSION ENTRIES
;------------------
;@(+ "name" offset) : permissionlocator

;permission locator (PL) format:
;Permission bit location (PBL) = (MOD PL 0x100) -> value between 0 and 255
;Permission row location (PRL) = (MOD (DIV PL 0x100) 0x100) -> value between 0 and 255

;To determine if 0xAddress has a permission "name", use above to obtain the bit location and row location the value will be given by:

;permission value = ((DIV @@(+ (* 0xAddr colavd) PRL) (EXP 2 PBL)) 0x10)

;Storage slots 
;(+ (* 0xAddress colavd) 0) - (+ (* 0xAddress colavd) colavd)
;Store rows of permission bit strings associated with 0xAddress
;
;The permission locator stores both the row and the bit the permission value appears at
;Permissions take values between 0 and 15


;VARIABLES
;---------
;@(+ "name" (* 2 offset)) : Variable value

;Variables are simpler then all the other things. They store something tied to a name. the 2 * offset is to partition the name space


;FUNCTION CALLS / TRANSACTION SPECIFICATIONS 
;===========================================
;DOUG Name Table Functions

;register
;-------------------------------------------------------------------
;Register a contract to a name
;Permission Requirement: "doug"
;"register" "name" 0xAddress [#type #behaviour #data #model #UI]
;returns - [0 - failure, 1 - success]
;-------------------------------------------------------------------
;name 		- Name by which the contract shall be referenced by
;Address 	- Address of the contract you are registering to name
;-------------------------------------------------------------------


;checkname
;--------------------------------------------------
;Request Address of contract associated with "name"
;Permission Requirement : NONE
;"checkname" "name"
;Returns: 0xAddress associated with name
;--------------------------------------------------
;"name"  - name of contract you want address of
;--------------------------------------------------


;PERMISSION FUNCTIONS

;setperm
;------------------------------------------------------------------------------------------
;Sets permission for a target for given permission to value. Note the permission must exist
;Permission Requirements: "doug"
;"setperm" "name" 0xTarget [#value]
;Returns: [0 - Failure, 1 - Success]
;------------------------------------------------------------------------------------------
;"name"		- name of permission
;0xTarget 	- Address of target whose permission you are setting
;#value 	- Value you are setting target's permission at [0,15], if not included -> 0
;------------------------------------------------------------------------------------------

;addperm
;--------------------------------------------
;Creates a new permission with name "name"
;Permission Requirement: "doug"
;"addperm" "name"
;Returns: [0 - Failure, 1 - Success]
;--------------------------------------------
;"name" - name of permission you are creating
;--------------------------------------------

;checkperm
;-------------------------------------------------------------------
;Returns the value of a permission "name" which the target has
;Permission Requirements: NONE
;"checkperm" "name" 0xTarget
;Returns: Permission value [0,15]
;-------------------------------------------------------------------
;"name"    - Name of permission
;0xTarget  - Address which you want to know the permission value for
;-------------------------------------------------------------------

;VARIABLE FUNCTIONS

;setvar
;------------------------------------------------------
;Set the value of the variable associated with "name"
;Permission Requirements: "doug"
;"setvar" "name" #value
;Returns: [0 - Failure, 1 - Success]
;------------------------------------------------------
;"name"	- Name of variable
;#value - Value you are setting the variable to
;------------------------------------------------------

;getvar
;-------------------------------------
;Get the value associated with "name"
;Permission Requirements: NONE
;"getvar" "name"
;Returns: Value of variable
;-------------------------------------
;"name" - Name of variable
;-------------------------------------

{
	;===============================================================================================
	;Environment definitions

	;C3D - BA compatibility
	(def 'BAindicator 0x10)
	(def 'BAdmpointer 0x11)
	(def 'BAUIpointer 0x12)
	(def 'BAblob 0x13)
	(def 'BAparent 0x14)
	(def 'BAowner 0x15)
	(def 'BAcreator 0x16)
	(def 'BAtime 0x17)
	(def 'BAbehaviour 0x18)
	(def 'BALLstart 0x19)

	;C3D BA - Linked list structure definitions
	(def 'nextslot (addr) (+ addr 2))
	(def 'nextlink (addr) @@(+ addr 2))
	(def 'prevslot (addr) (+ addr 1))
	(def 'prevlink (addr) @@(+ addr 1))

	(def 'typeslot (addr) (+ addr 3))
	(def 'behaviourslot (addr) (+ addr 4))
	(def 'dataslot (addr) (+ addr 5))
	(def 'modelslot (addr) (+ addr 6))
	(def 'UIslot (addr) (+ addr 7))
	(def 'timeslot (addr) (+ addr 8))

	(def 'NEG (value) (- 0 value))
	(def 'gass () (- (GAS) 100))
	;============================================================================================

	(def 'DOUGDATAMODEL 0x0) ;Fill these in if you want
	(def 'DOUGUIPOINTER 0x0)
	(def 'DOUGBLOB 0x0)

	;General structure
	(def 'headslot BALLstart) ;This will keep LLstart at newest element
	(def 'tailslot 0x20)
	(def 'countslot 0x22)
	(def 'prowslot 0x23)
	(def 'pbitslot 0x24)

	;Global Variables
	(def 'GFzeros 0x1000000)
	(def 'offset 0x10000)
	(def 'colavd 0x100)

	(def 'BLcheck (addr) (= (MOD @@(* addr colavd) 0x10) 1))

	;(Register)
	(def 'cmd () (calldataload 0x0))
	(def 'name () (calldataload 0x20))
	(def 'target () (calldataload 0x40))
	(def 'type () (calldataload 0x60))
	(def 'behaviour () (calldataload 0x80))
	(def 'data () (calldataload 0xA0))
	(def 'model () (calldataload 0xC0))
	(def 'UI () (calldataload 0xE0))

	;DOUG Variable space
	(def 'varname () (+ (calldataload 0x20) (* 2 offset)))
	(def 'value () (calldataload 0x40))

	;Permission
	(def 'permname () (+ (calldataload 0x20) offset))
	(def 'permnum () (calldataload 0x60))


	;INITIALIZATION
	[[BAindicator]]0x88554646BA
	[[BAdmpointer]] DOUGDATAMODEL
	[[BAUIpointer]] DOUGUIPOINTER
	[[BAblob]] DOUGBLOB
	[[BAparent]] 0x0 ;DOUG IS SUPREME
	[[BAowner]]"The People"
	[[BAcreator]]"Dennis Mckinnon" ; These feilds have no purpose in DOUG
	[[BAtime]](NUMBER)
	[[BAbehaviour]]1

	[[countslot]] 0  			; Number of registered names

	[[0x7]]offset 				;For Ethan and Go
	[[0x8]]GFzeros
	[[0x9]]colavd

	;Name Linked list
	[[tailslot]] 0x30 ;Tail
	[[headslot]] 0x30 ;Head

	[[0x30]] 0xDEADBEEF ;Filler NEVER EVER EVER! (I mean it) delete this entry
	;Previous for this element is 0


	;Minimal Viable Chain set up
	[[(+ "doug" offset)]]0 ;DOUG permissions located at 0th root start position 0
	[[(+ "mine" offset)]]4 ;Mine permission located at 4th bit
	[[(+ "create" offset)]]8 ;Create permission located at 8th bit
	[[(+ "transact" offset)]]12 ;Transact

	[[(+ "maxgas" (* 2 offset))]]10000000000000000000; will look to bring down as other things stabilize

	[[pbitslot]] 16 ;Next free bit location
	[[prowslot]] 0 	;Permission row


	;THIS NEEDS TO BE HANDLED DIFFERENTLY???
	[[(* (CALLER) colavd)]]0x1111 ;Give (CALLER) full DOUG permissions to start
	[[(* 0x38155ef3698a43b24b054d816a8a5f79fc148623 colavd)]] 0x1111 ;NEED TO REMOVE THIS




	(return 0 (lll {

	;DOUG Functions
	;=================================================================================

		(when (= (cmd) "checkname")
			{
				(unless (= (MOD (name) GFzeros) 0) (STOP)) ;name must be of good form
				[0x0]@@(name) ;Get address associated with "name"
				(return 0x0 0x20) ; Return the Address
			}
		)

		(when (= (cmd) "register")
			{

				(unless (BLcheck (CALLER)) (STOP))
				(unless (&& (> (name) 0x20) (> (target) 0x20) (= (MOD (name) GFzeros) 0)) (STOP)); Prevent out of bounds registrations


				(when (= @@(name) 0) ;name does not exist yet
					{
						;Perform appending to list
						[[(prevslot (name))]] @@headslot 	;Set previous to value in head
						[[(nextslot @@headslot)]] (name) 	;Set head's next to current name
						[[headslot]](name) 			;Set Head to current name
						[[countslot]](+ @@countslot 1) 	;Increment names counter
					}
				)
				[[(name)]] (target) ;Store target at name

				;Data Attached
				[[(typeslot (name))]](type)
				[[(behaviourslot (name))]](behaviour)
				[[(dataslot (name))]](data)
				[[(modelslot (name))]](model)
				[[(UIslot (name))]](UI)
				[[(timeslot (name))]](NUMBER)

				[0x0]1
				(return 0x0 0x20)
			}
		)

	;DOUG Variables
	;=========================================================================================

		(when (= (cmd) "getvar")
			{
				(unless (= (MOD (name) GFzeros) 0) (STOP)) ;name must be of good form
				[0x0]@@(varname);Get value associated with "name"
				(return 0x0 0x20) ; Return the Address
			}
		)

		(when (= (cmd) "setvar")
			{
				(unless (BLcheck (CALLER)) (STOP))
				(unless (= (MOD (name) GFzeros) 0) (STOP)) ;Name must be of good form
				[[(varname)]](value)

				[0x0]1
				(return 0x0 0x20)
			}
		)	


	;Permissions Functions
	;=========================================================================================

		(when (= (cmd) "checkperm")
			{
				;Check what permission target has.
				(unless (= (MOD (name) GFzeros) 0) (STOP)) ;Permission name should be of good form (use permname after this name is raw supplied name)
				(unless (|| @@(permname) (= (name) "doug")) (STOP)) ;Stop if permission does not exist

				[0x0](MOD @@(permname) 256)		;Get start position (first 8 bits)
				[0x20](MOD (DIV @@(permname) 256) colavd)	;Get Row permission located on. 1 byte

				[0x0](MOD (DIV @@(+ (* (target) colavd) @0x20) (EXP 2 @0x0)) 0x10) 	;This is The permission value
				(return 0x0 0x20) ;Return requested value
			}
		)

		(when (= (cmd) "setperm")
			{
				(unless (BLcheck (CALLER)) (STOP))
				(unless (= (MOD (name) GFzeros) 0) (STOP)) ;Permission name must be of good form
				(unless (|| @@(permname) (= (name) "doug")) (STOP)) ;Stop if permission does not exist

				;Set Permission.
				[0x0](MOD @@(permname) 256)	;Get start position
				[0x20](MOD (DIV @@(permname) 256) colavd)	;Get Row permission located on.
				[0x40](MOD (permnum) 0x10)	;Get The permission number to set

				[0x60](MOD (DIV @@(+ (target) @0x20) (EXP 2 @0x0)) 0x10) 	;This is The current permission value
				[0x60](- @@(+ (* (target) colavd) @0x20) (* (EXP 2 @0x0) @0x60))	;Subtract out all permissions at this slot
				[0x60](+ @0x60 (* (EXP 2 @0x0) @0x40))					;Add in the new permissions at this slot
				[[(+ (* (target) colavd) @0x20)]]@0x60					;Set

				[0x0]1
				(return 0x0 0x20)
			}
		)

		(when (= (cmd) "addperm")
			{

				(unless (BLcheck (CALLER)) (STOP))
				(unless (&& (> (name) 0x20) (= (MOD (name) GFzeros) 0)) (STOP)) ;name in range and name of "good form"

				(when (|| @@(permname) (= (name) "doug")) (STOP)) ;Can't add a permission which already exists

				[[(permname)]] (+ (* @@prowslot 256) @@pbitslot) ;Encode where this permission lies in bitstrings
				[[pbitslot]] (+ @@pbitslot 4) ;increment start postion
				(when (> @@pbitslot 252)
					{
						[[pbitslot]]0 ;New slot
						[[prowslot]](+ @@prowslot 1) ;Increment row
					}
				)

				[0x0]1
				(return 0x0 0x20)
			}
		)
	} 0))
}

