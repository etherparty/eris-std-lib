;Gen DOUG

;FUNCTION CALLS / TRANSACTION SPECIFICATIONS 
;===========================================
;DOUG Name Table Functions

;register
;-------------------------------------------------------------------
;Register a contract to a name
;Permission Requirement: "doug"
;"register" "name" 0xAddress [#type #behaviour #data #model #UI]
;returns - [0 - failure, 1 - success]
;-------------------------------------------------------------------
;name 		- Name by which the contract shall be referenced by
;Address 	- Address of the contract you are registering to name
;-------------------------------------------------------------------


;checkname
;--------------------------------------------------
;Request Address of contract associated with "name"
;Permission Requirement : NONE
;"checkname" "name"
;Returns: 0xAddress associated with name
;--------------------------------------------------
;"name"  - name of contract you want address of
;--------------------------------------------------


;PERMISSION FUNCTIONS

;setperm
;------------------------------------------------------------------------------------------
;Sets permission for a target for given permission to value. Note the permission must exist
;Permission Requirements: "doug"
;"setperm" "name" 0xTarget [#value]
;Returns: [0 - Failure, 1 - Success]
;------------------------------------------------------------------------------------------
;"name"		- name of permission
;0xTarget 	- Address of target whose permission you are setting
;#value 	- Value you are setting target's permission at [0,15], if not included -> 0
;------------------------------------------------------------------------------------------

;addperm
;--------------------------------------------
;Creates a new permission with name "name"
;Permission Requirement: "doug"
;"addperm" "name"
;Returns: [0 - Failure, 1 - Success]
;--------------------------------------------
;"name" - name of permission you are creating
;--------------------------------------------

;checkperm
;-------------------------------------------------------------------
;Returns the value of a permission "name" which the target has
;Permission Requirements: NONE
;"checkperm" "name" 0xTarget
;Returns: Permission value [0,15]
;-------------------------------------------------------------------
;"name"    - Name of permission
;0xTarget  - Address which you want to know the permission value for
;-------------------------------------------------------------------

;VARIABLE FUNCTIONS

;setvar
;------------------------------------------------------
;Set the value of the variable associated with "name"
;Permission Requirements: "doug"
;"setvar" "name" #value
;Returns: [0 - Failure, 1 - Success]
;------------------------------------------------------
;"name"	- Name of variable
;#value - Value you are setting the variable to
;------------------------------------------------------

;getvar
;-------------------------------------
;Get the value associated with "name"
;Permission Requirements: NONE
;"getvar" "name"
;Returns: Value of variable
;-------------------------------------
;"name" - Name of variable
;-------------------------------------

;CONSENSUS FUNCTIONS

;addminer
;------------------------------------------------------------------------------------------------
;Add a target address to the list of miners, set relevant data, and give them permission to mine
;Permission Requirements: doug
;"addminer" 0xmineraddr "minername" #stake
;Returns: [0 - Failure, 1 - Success]
;------------------------------------------------------------------------------------------------
;"name"   - Name associated to miner
;0xTarget - Address of miner
;#stake   - Stake for that miner
;------------------------------------------------------------------------------------------------

;rmminer
;------------------------------------------------------------------------------------------------
;Remove a Target address to the list of miners, and set their mining permission to mine
;Permission Requirements: doug
;"rmminer" 0xmineraddress
;Returns: [0 - Failure, 1 - Success]
;------------------------------------------------------------------------------------------------
;0xmineraddress - Miner's public address (who you are removing)
;------------------------------------------------------------------------------------------------

{
	(include "../defs/stdvarspace.def")
	(include "../defs/single.def")
	(include "../defs/stdarray.def")
	(include "../defs/stdll.def")
	(include "../defs/c3d.def")

	(def 'NEG (value) (- 0 value))
	(def 'gass () (- (GAS) 100))

	(def 'DOUGDATAMODEL 0x0) ;Fill these in if you want
	(def 'DOUGUIPOINTER 0x0)
	(def 'DOUGBLOB 0x0)

	;General structure

	;Minimum Viable Doug Set Up
	(llInit "permnames" "none" "none" "none")
	(llAddLink "permnames" "doug" 0)

	(arrayInit "perms" "none" "none" "none" 4) 
	(arraySetE "perms" (CALLER) 0 1) ;Gives Caller DOUG

;	(def 'BLcheck (addr) (|| (= (singleGet "public:doug") 1)(= (arrayGetE "perms" addr 0) 1)))
	(def 'BLcheck (addr) (= (arrayGetE "perms" addr 0) 1))

	;(Register)
	(def 'cmd () (calldataload 0x0))
	(def 'name () (calldataload 0x20))
	(def 'target () (calldataload 0x40))
	(def 'type () (calldataload 0x60))
	(def 'behaviour () (calldataload 0x80))
	(def 'data () (calldataload 0xA0))
	(def 'model () (calldataload 0xC0))
	(def 'UI () (calldataload 0xE0))

	;DOUG Variable space
	(def 'value () (calldataload 0x40))

	(def 'key () (calldataload 0x40))
	(def 'enum () (calldataload 0x60))


	(def 'type () (calldataload 0x40))

	(def 'svalue () (calldataload 0x60))

	(def 'dvalue () (calldataload 0x40))
	(def 'dvalue2 () (calldataload 0x60))

	(def 'lkey () (calldataload 0x40))
	(def 'lvalue () (calldataload 0x60))
	
	(def 'akey () (calldataload 0x40))
	(def 'aenum () (calldataload 0x60))
	(def 'avalue () (calldataload 0x80))

	(def 'aesize () (calldataload 0x40))

	;Permission
	(def 'permnum () (calldataload 0x60))

	;INITIALIZATION
	[0x300]0x88554646BA
	[0x320] DOUGDATAMODEL
	[0x340] DOUGUIPOINTER
	[0x360] DOUGBLOB
	[0x380] 0x0 ;DOUG IS SUPREME
	[0x3A0]"The People"
	[0x3C0]"Dennis Mckinnon" ; These feilds have no purpose in DOUG
	[0x3E0]1
	(C3DInit 0x300 0 1 0 0 0 0 0)

	(llInit "DOUG" "none" "none" "none" "DOUG" (Address))

	[[0x38155ef3698a43b24b054d816a8a5f79fc148623]] 0x1111 ;NEED TO REMOVE THIS

	(return 0 (lll {

	;DOUG Functions
	;=================================================================================

		(when (= (cmd) "checkname")
			{
				[0x0](llGet "DOUG" (name))
				(return 0x0 0x20) ; Return the Address
			}
		)

		(when (= (cmd) "register")
			{
				(unless (BLcheck (ORIGIN)) (STOP))

				(llAddLink "DOUG" (name) (target))

				;C3D Data Attached
				[0x300](name)
				[0x320](type)
				[0x340](behaviour)
				[0x360](data)
				[0x380](model)
				[0x3A0](UI)

				(C3DAddLink (target) 0x300 0 1)

				[0x0]1
				(return 0x0 0x20)
			}
		)

	;DOUG Variables
	;=========================================================================================

		(when (= (cmd) "getvar")
			{
				(when (= (vtype (name)) "single")
					{
						[0x0](singleGet (name))
						(return 0x0 0x20) ; Return the Address
					}
				)

				(when (= (vtype (name)) "double")
					{
						(doubleload (name) 0x0)
						(return 0x0 0x40) ; Return the Address
					}
				)

				(when (= (vtype (name)) "linkedlist")
					{
						[0x0](llGet (name) (key))
						(return 0x0 0x20) ; Return the Address
					}
				)

				(when (= (vtype (name)) "keyvalue")
					{
						[0x0](kvGet (name) (key))
						(return 0x0 0x20) ; Return the Address
					}
				)

				(when (= (vtype (name)) "array")
					{
						[0x0](arrayGet (name) (key) (enum))
						(return 0x0 0x20) ; Return the Address
					}
				)
			}
		)

		(when (= (cmd) "setvar")
			{
				(unless (BLcheck (ORIGIN)) (STOP))
				(when (= (type) "single")
					{
						(if (= (vtype (name)) 0)
							(singleInit (name) "none" "none" "none" (svalue))
							(singleSet (name) (svalue))
						)
					}
				)

				(when (= (type) "double")
					{
						(if (= (vtype (name)) 0)
							(doubleInit (name) "none" "none" "none" (dvalue) (dvalue2))
							(doubleSet (name) (dvalue) (dvalue2))
						)
					}
				)

				(when (= (type) "linkedlist")
					{
						(if (= (vtype (name)) 0)
							{
								(llInit (name) "none" "none" "none")
								(llSet (name) (lkey) (lvalue))
							}
							(llSet (name) (lkey) (lvalue))
						)
					}
				)

				(when (= (type) "keyvalue")
					{
						(if (= (vtype (name)) 0)
							{
								(kvInit (name) "none" "none" "none")
								(kvSet (name) (lkey) (lvalue))
							}
							(kvSet (name) (lkey) (lvalue))
						)
					}
				)

				(when (= (type) "array")
					{
						(if (= (vtype (name)) 0)
							(STOP)
							(llSet (name) (akey) (avalue))
						)
					}
				)
				[0x0]1
				(return 0x0 0x20)
			}
		)

		(when (= (cmd) "initvar")
			{
				(unless (BLcheck (ORIGIN)) (STOP))
				(when (= (type) "single")
					{
						(if (= (vtype (name)) 0)
							(singleInit (name) "none" "none" "none" (svalue))
							(singleSet (name) (svalue))
						)
					}
				)

				(when (= (type) "double")
					{
						(if (= (vtype (name)) 0)
							(doubleInit (name) "none" "none" "none" (dvalue) (dvalue2))
							(doubleSet (name) (dvalue) (dvalue2))
						)
					}
				)

				(when (= (type) "linkedlist") (if (= (vtype (name)) 0) (llInit (name) "none" "none" "none") (STOP)))

				(when (= (type) "keyvalue") (if (= (vtype (name)) 0) (kvInit (name) "none" "none" "none") (STOP)))

				(when (= (type) "array") (if (= (vtype (name)) 0) (arrayInit (name) "none" "none" "none" (aesize)) (STOP)))

				[0x0]1
				(return 0x0 0x20)
			}
		)	


	;Permissions Functions
	;=========================================================================================

		(when (= (cmd) "checkperm")
			{
				[0x0](arrayGetE "perms" (target) (llGet "permnames" (name)))
				(return 0x0 0x20) ;Return requested value
			}
		)

		(when (= (cmd) "setperm")
			{
				(unless (BLcheck (ORIGIN)) (STOP))
				(arraySetE "perms" (target) (llGet "permnames" (name)) (permnum))
				[0x0]1
				(return 0x0 0x20)
			}
		)

		(when (= (cmd) "addperm")
			{

				(unless (BLcheck (ORIGIN)) (STOP))
				(llAddLink "permnames" (name) (+ @@(llLenSlot "permnames") 1))

				[0x0]1
				(return 0x0 0x20)
			}
		)
	} 0))
}